
---
0:
  -
    function: "Read data"
    guide:
      - 'print(term.bold(term.magenta("Please use the following function to read the data")))'
      - 'print(term.green_on_black("dataframe_dict = flow.load_data(path : str, files_list : list)"))'
      - 'print(term.bold(term.magenta("For example: ") + term.green_on_black("path = ''./data''")))'
      - 'print(term.bold(term.magenta("For example: ") + term.green_on_black("files_list = [''train.csv'',''test
      .csv'']")))'
      - 'print(term.bold(term.magenta("The output is a dictionary that contains dataframes e.g.  ")))'
      - 'print(term.blue("dataframe_dict = {''train'': train_dataframe,''test'': test_dataframe}"))'
1:
  -
    function: "Encode categorical features"
    guide:
      - 'print(term.bold(term.magenta(
          "If you have categorical features with string labels, "
          "Encode the categorical features by applying the following function:\n") +
          term.green_on_black(
          "dataframe_dict, columns_set = flow.encode_categorical_feature(dataframe_dict: dict)")))'
2:
  -
    function: "Scale numeric features"
    guide:
      - 'print(term.bold(term.magenta("If you have numeric features, it is a good idea to normalize numeric features. Use the
        following function for feature normalization :\n") + term.green_on_black("dataframe_dict, columns_set = flow.scale_data
        (dataframe_dict: dict, ignore_columns: list)")))'
      - 'print(term.bold(term.magenta("For example: ") + term.green_on_black("ignore_columns = [''id'', ''target'']")))'
3:
  -
    function: "Train a model"
    guide:
      - 'print(term.bold(term.magenta("Your features are ready to train the model: ")))'
      - 'print(term.bold(term.magenta("If you want to explore the data you can run one of the following functions: ")))'
      - 'print(term.bold(term.magenta("1 . ") + term.green_on_black("flow.exploring_data(dataframe_dict: dict, "
                                                                                                          "key_i: str)")))'
      - 'print(term.bold(term.magenta("For example: ") + term.green_on_black("flow.exploring_data(dataframe_dict, "
                                                     "''train'')")))'
      - 'print(term.bold(term.magenta("2 . ") + term.green_on_black(
          "flow.comparing_statistics(dataframe_dict: dict)")))'
      - 'print(term.bold(term.magenta("For example: ") + term.green_on_black("flow.comparing_statistics("
                                                     "dataframe_dict)")))'
      - 'print("\n\n\n")'
      - 'print(term.bold(term.magenta("You can start training the model by applying the following function: ")))'
      - 'print(term.green_on_black("model_index_list, save_models_dir, y_test = flow.training(parameters)"))'
      - 'print(''parameters = { \n
        "data": {\n
          "train": {"features": train_dataframe, "target": train_target},\n
          "valid": {"features": valid_dataframe, "target": valid_target},\n
          "test": {"features": test_dataframe, "target": test_target},\n
        },\n
        "split": {\n
          "method": "split",  # "method":"kfold"\n
          "split_ratios": 0.2,  # fold_nr: 5 , "split_ratios": 0.2 # "split_ratios":(0.3,0.2)\n
        },\n
        "model": {"type": "Ridge linear regression",\n
                  "hyperparameters": {"alpha": 1,  # alpha:optimize\n
                  },\n
        },\n
        "metrics": ["r2_score", "mean_squared_error"]\n
        }'')'
4:
  -
    function: "One-hot encoding"
    guide:
      - 'print(term.bold(term.magenta("You have categorical features. Apply one-hot encoding to the categorical features
          by applying the following function:\n") + term.green_on_black("dataframe_dict, columns_set = flow.one_hot_encoding
          (dataframe_dict: dict, ignore_columns: list, class_number_range=[3, 50]")))'
      - 'print(term.bold(term.magenta("Since one-hot encoding can produce a lot of features, class_number_range will
          limit the encoding process only for features which have between 3 and 49 unique values.")))'
      - 'print(term.bold(term.magenta("If you are solving a classification problem, you should exclude the target from
          the one-hot encoding process by defining the ingore_columns\n")+ term.green_on_black("ingore_columns = [<your
          target/label>]\n") + term.magenta("You can add more columns to the ingore_columns list to ignore")))'
5:
  -
    function: "Flatten JSON data"
    guide:
      - 'print(term.bold(term.magenta(
          "You have JSON nested data inside the dataframe columns. "
          "Flatten the nested JSON data by applying the following function:\n") +
          term.green_on_black(
          "dataframe_dict, columns_set= flow.flatten_json_data(dataframe_dict)")))'
6:
  -
    function: "Drop high correlcted columns but keep one"
    guide:
      - 'print(term.bold(term.magenta(
          "If some features are highly correlated, they do not provide more information about the target prediction. "
          "It is a good idea to drop such features but keep one:\n") +
          term.green_on_black(
          "coming soon!")))'
7:
  -
    function: "Delete features with constant values"
    guide:
      - 'print(term.bold(term.magenta(
          "If some features have in all rows the same value, they have no influence on the target prediction. "
          "It is a good idea to delete such features:\n") +
          term.green_on_black(
          "coming soon!")))'

1000:
  -
    function: "Finish"
    guide:
      - 'print("This is the end of the flow")'